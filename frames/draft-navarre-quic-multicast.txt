



QUIC                                                          L. Navarre
Internet-Draft                                            O. Bonaventure
Intended status: Experimental                                  UCLouvain
Expires: 18 April 2025                                   15 October 2024


               Extending QUIC with multicast capabilities
                  draft-navarre-quic-multicast-latest

Abstract

   TODO Abstract

About This Document

   This note is to be removed before publishing as an RFC.

   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-navarre-quic-multicast/.

   Discussion of this document takes place on the QUIC Working Group
   mailing list (mailto:quic@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/quic/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/quic/.

   Source for this draft and an issue tracker can be found at
   https://github.com/louisna/draft-navarre-quic-multicast.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 18 April 2025.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Handshake Negotiation and Transport parameter
   4.  New Frames
     4.1.  FC_ANNOUNCE frame
     4.2.  FC_STATE frame
       4.2.1.  FC_STATE actions
     4.3.  FC_KEY frame
       4.3.1.  FC_KEY algorithms
   5.  Security Considerations
   6.  IANA Considerations
   7.  References
     7.1.  Normative References
     7.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   TODO Introduction

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Handshake Negotiation and Transport parameter

   This extension defines a new transport parameter, used to negotiate
   the use of the flexicast extensiong during the connection handshake,
   as specified in [QUIC-TRANSPORT].  The new transport parameter is
   defined as follows:

   *  flexicast_support (current version uses TDB-03): the presence of
      this transport parameter indicates support of the flexicast
      extension.  The transport parameter contains two boolean values,
      respectively indicating support of IPv4 and IPv6 for multicast
      addresses.  If an endpoint receives the flexicast_support
      transport parameter with both IPv4 and IPv6 supports set to false
      (0), it must close the connection with an error type of
      FC_PROTOCOL_VIOLATION.

   The final support of the flexicast extension is conditioned to the
   support of the multipath extension, as defined in [MULTIPATH-QUIC].
   Since a Flexicast flow is a new multipath path, the support of
   multipath, with sufficient (e.g., at least 2) path ID, is required,
   as defined in Section 2 of [MULTIPATH-QUIC].

   An endpoint receiving the flexicast_support transport parameter from
   its peer, without support for multicast MUST ignore the
   flexicast_support transport parameter, as if the peer does not
   support the flexicast extension.

   The extension does not change the definition of any transport
   parameter defined in Section 18.2 of [QUIC-TRANSPORT].

4.  New Frames

   All frames defined in this document MUST only be sent in 1-RTT
   packets.

   If an endpoint receives a flexicast-specific frame in a different
   packet type, it MUST close the connection with an error of type
   FRAME_ENCODING_ERROR.

   Receipt of flexicast-specific frames related to a Flexicast Flow ID
   that is not added by an endpoint MUST be treated as a connection
   error of type FC_PROTOCOL_VIOLATION.

   If an endpoint receives a flexicast-specific frame with a Flexicast
   Flow ID that it cannot process anymore (e.g., the flexicast flow
   might have been abandoned), it MUST silently ignore the frame.

   The new frames introduced below are for control-specific purpose
   only, and MUST NOT be sent on the Flexicast flow.  Receipt of any of
   the following frames on the Flexicast flow MUST be trated as a
   connection error of type FC_PROTOCOL_VIOLATION.

4.1.  FC_ANNOUNCE frame

   The FC_ANNOUNCE frame informs the receiver that a Flexicast flow is
   available or updated.  FC_ANNOUNCE frames MUST NOT be sent by the
   receiver.  A Flexicast QUIC source receiving an FC_ANNOUNCE frame
   MUST close the connection with a connection error of type
   FC_PROTOCOL_VIOLATION.

   FC_ANNOUNCE frames are formatted as shown in Figure 1.

   FC_ANNOUNCE Frame {
       Type (i) = TBD-00,
       Length (8),
       Flexicast Flow ID (8..160),
       Sequence number (i),
       IP Version (8),
       Source IP (32, 128),
       Group IP (32, 128),
       UDP Port (16),
       Ack delay timer (64),
   }

                     Figure 1: FC_ANNOUNCE Frame Format

   FC_ANNOUNCE frames contain the following fields:

   Length: An 8-bit unsigned internet containing the length of the
   Flexicast Flow ID.  Values less than 1 and greated than 20 are
   invalid and MUST be treated as a connection error of type
   FRAME_ENCODING_ERROR.

   Flexicast Flow ID: A Flexicast Flow ID of the specified length.

   Sequence number: The monotically increasing sequence number related
   to the advertised Flexicast Flow ID.

   IP Version: An 8-bit unsigned integer containing the version of IP
   used to advertise the Source IP and Group IP.  Values different than
   4 (for IPv4) and 6 (IPv6) are invalid and MUST be treated as a
   conneciton error of type FRAME_ENCODING_ERROR.

   Source IP: The IP address of the multicast source.

   Group IP: The IP address of the multicast group.  The address MUST be
   a multicast address.

   UDP Port: The UDP destination port.

   Ack delay timer: A 64-bit unsigned integer containing the delay, in
   ms, between two acknowledgments from a receiver.

   FC_ANNOUNCE frames are ack-eliciting.  If a packet containing an
   FC_ANNOUNCE frame is considered lost, the peer SHOULD repeat it.

   Sources are allowed to send multiple times FC_ANNOUNCE frames with an
   increasing sequence number for the same Flexicast Flow ID.  New
   FC_ANNOUNCE frames MAY contain updated information, e.g., a new Ack
   delay timer.

   Sources are allowed to advertise multiple Flexicast flows by sending
   multiple parallel FC_ANNOUNCE frames with distinct Flexicast Flow
   IDs.  The Sequence number is linked to a specific Flexicast Flow ID.
   The same Sequence number can be used for two distinct Flexicast Flow
   IDs.

   TODO: the frame should also contain a Status field to indicate if the
   flexicast flow is retired?

4.2.  FC_STATE frame

   The FC_STATE frame informs the endpoint of the state of the Flexicast
   receiver in the Flexicast flow.  FC_STATE frames MAY be sent by both
   endpoints (i.e., receiver and source).

   FC_STATE frames are formatted as shown in Figure 2.

   FC_STATE frame {
       Type (i) = TDB-01,
       Length (8),
       Flexicast Flow ID (8..160),
       Sequence number (i),
       Action (u64),
   }

                      Figure 2: FC_STATE Frame Format

   FC_STATE frames contain the following fields:

   Length: An 8-bit unsigned internet containing the length of the
   Flexicast Flow ID.  Values less than 1 and greated than 20 are
   invalid and MUST be treated as a connection error of type
   FRAME_ENCODING_ERROR.

   Flexicast Flow ID: The Flexicast Flow ID of the Flexicast flow that
   this frame relates to.

   Sequence number: The monotically increasing sequence number related
   to the advertised Flexicast Flow ID.

   Action: The bit-encoded action, defined in Section Section 4.2.1.

   FC_STATE frames are ack-eliciting.  If a packet containing an
   FC_STATE frame is considered lost, the peer SHOULD repeat it.

   For a same Flexicast flow (i.e., identical Flexicast Flow ID), both
   endpoints use their own Sequence number.

   A receiver sending an FC_STATE frame indicates the source its status
   regarding the Flexicast flow indicated by the Flexicast Flow ID.  The
   source MAY also send FC_STATE frames to a receiver to unilaterally
   change the status of the receiver within the Flexicast flow indicated
   by the Flexicast Flow ID.

4.2.1.  FC_STATE actions

   This section lists the defined Actions encoded in an FC_STATE frame.
   An endpoint receiving an unknown value MUST treat it as a connection
   error of type FC_PROTOCOL_VIOLATION.

   The three following actions are receiver-specific.  These actions
   MUST NOT be sent inside an FC_STATE frame sent by the source.  A
   receiver receiving an FC_STATE frame with any of the following
   actions MUST treat it as a connection error of type
   FC_PROTOCOL_VIOLATION.

   JOIN (0x01): The receiver joins the Flexicast flow.

   LEAVE (0x02): The receiver leaves the Flexicast flow.

   READY (0x03): The receiver is ready to receive content on the
   Flexicast flow.

   The following action is source-specific.  This action MUST NOT be
   sent inside an FC_STATE frame sent by the receiver.  A source
   receiving an FC_STATE frame with the following action MUST treat it
   as a connection error of type FC_PROTOCOL_VIOLATION.

   MUST_LEAVE (0x04): The source unilaterally decides that the receiver
   MUST leave the Flexicast flow.

4.3.  FC_KEY frame

   The FC_KEY frame informs a receiver with the decryption key of a
   Flexicast flow joined by the receiver.  FC_KEY frames MUST NOT be
   sent by the receiver.  A Flexicast QUIC source receiving an FC_KEY
   frame MUST clone the connection with a connection error of type
   FC_PROTOCOL_VIOLATION.

   FC_KEY frames are formatted as shown in Figure 3.

   FC_KEY Frame {
       Type (i) = TDB-02,
       Length(8),
       Flexicast Flow ID(8..160),
       Sequence number (i),
       Key length (i),
       Key (..),
       Algorithm (64),
   }

                       Figure 3: FC_KEY Frame Format

   FC_KEY frames contain the following fields:

   Length: An 8-bit unsigned internet containing the length of the
   Flexicast Flow ID.  Values less than 1 and greated than 20 are
   invalid and MUST be treated as a connection error of type
   FRAME_ENCODING_ERROR.

   Flexicast Flow ID: The Flexicast Flow ID of the Flexicast flow that
   this frame relates to.

   Sequence number: The monotically increasing sequence number related
   to the advertised Flexicast Flow ID.

   Key length: A var-int indicating the length of the decryption key.

   Key: Byte-sequence of the decryption key of the Flexicast flow.

   Algorithm: The bit-encoded algorithm used for decryption, defined in
   Section Section 4.3.1.

   FC_KEY frames are ack-eliciting.  If a packet containing an FC_STATE
   frame is considered lost, the peer SHOULD repeat it.

   The source MAY send new FC_KEY frames with an increased sequence
   number to notify a new decryption key.  This mechanism can be used to
   provide backward and forward secrecy with dynamic Flexicast groups.

4.3.1.  FC_KEY algorithms

   TODO: define the bit-encoded algorithms.

5.  Security Considerations

   TODO Security

6.  IANA Considerations

   This document has no IANA actions.

7.  References

7.1.  Normative References

   [QUIC-TRANSPORT]
              Iyengar, J., Ed. and M. Thomson, Ed., "QUIC: A UDP-Based
              Multiplexed and Secure Transport", RFC 9000,
              DOI 10.17487/RFC9000, May 2021,
              <https://www.rfc-editor.org/rfc/rfc9000>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

7.2.  Informative References

   [MULTIPATH-QUIC]
              Liu, Y., Ma, Y., De Coninck, Q., Bonaventure, O., Huitema,
              C., and M. Kühlewind, "Multipath Extension for QUIC", Work
              in Progress, Internet-Draft, draft-ietf-quic-multipath-10,
              8 July 2024, <https://datatracker.ietf.org/doc/html/draft-
              ietf-quic-multipath-10>.

   [RFC8678]  Baker, F., Bowers, C., and J. Linkova, "Enterprise
              Multihoming using Provider-Assigned IPv6 Addresses without
              Network Prefix Translation: Requirements and Solutions",
              RFC 8678, DOI 10.17487/RFC8678, December 2019,
              <https://www.rfc-editor.org/rfc/rfc8678>.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Louis Navarre
   UCLouvain
   Email: louis.navarre@uclouvain.be


   Olivier Bonaventure
   UCLouvain
   Email: olivier.bonaventure@uclouvain.be
